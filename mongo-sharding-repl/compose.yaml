name: mongo-sharding-repl
services:
  pymongo_api:
    container_name: pymongo_api
    build: 
      context: api_app
      dockerfile: Dockerfile
    image: kazhem/pymongo_api:1.0.0
    depends_on:
      - mongos_router
    ports:
      - 8080:8080
    environment:
      MONGODB_URL: "mongodb://mongos_router:27020"
      MONGODB_DATABASE_NAME: "somedb"

  # сервер конфигурации
  configSrv:
    image: mongo:latest # docker образ
    container_name: configSrv 
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - config-data:/data/db
    command:
      [
        "--configsvr",  # запуск в режиме конфигурации
        "--replSet",
        "config_server",
        "--bind_ip_all",
        "--port",
        "27017"
      ] 
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')", "--port", "27017" ]
      interval: 5s
      start_period: 10s

  # 1-й шард 
  shard1:
    image: mongo:latest
    container_name: shard1
    restart: always
    ports:
      - "27018:27018"
    volumes:
      - shard1-data:/data/db
    command:
      [
        "--shardsvr", # запуск в режиме шардинга
        "--replSet",
        "shard1", # название реплики
        "--bind_ip_all",
        "--port",
        "27018"
      ]
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')", "--port", "27018" ]
      interval: 5s
      start_period: 10s

  shard1_replica1:
    image: mongo:latest
    container_name: shard1_replica1
    restart: always
    ports:
      - "27021:27021"
    volumes:
      - shard1-replica1-data:/data/db
    depends_on:
      - shard1
    command:
      [
        "--shardsvr",
        "--replSet",
        "shard1",
        "--bind_ip_all",
        "--port",
        "27021"
      ]
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')", "--port", "27021" ]
      interval: 5s
      start_period: 10s

  shard1_replica2:
    image: mongo:latest
    container_name: shard1_replica2
    restart: always
    ports:
      - "27022:27022"
    volumes:
      - shard1-replica2-data:/data/db
    depends_on:
      - shard1
    command:
      [
        "--shardsvr",
        "--replSet",
        "shard1",
        "--bind_ip_all",
        "--port",
        "27022"
      ]
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')", "--port", "27022" ]
      interval: 5s
      start_period: 10s

  # 2-й шард 
  shard2:
    image: mongo:latest
    container_name: shard2
    restart: always
    ports:
      - "27019:27019"
    volumes:
      - shard2-data:/data/db
    command:
      [
        "--shardsvr", # запуск в режиме шардинга
        "--replSet",
        "shard2", # название реплик
        "--bind_ip_all",
        "--port",
        "27019"
      ]
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')", "--port", "27019" ]
      interval: 5s
      start_period: 10s

  shard2_replica1:
    image: mongo:latest
    container_name: shard2_replica1
    restart: always
    ports:
      - "27023:27023"
    volumes:
      - shard2-replica1-data:/data/db
    depends_on:
      - shard2
    command:
      [
        "--shardsvr",
        "--replSet",
        "shard2",
        "--bind_ip_all",
        "--port",
        "27023"
      ]
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')", "--port", "27023" ]
      interval: 5s
      start_period: 10s

  shard2_replica2:
    image: mongo:latest
    container_name: shard2_replica2
    restart: always
    ports:
      - "27024:27024"
    volumes:
      - shard2-replica2-data:/data/db
    depends_on:
      - shard2
    command:
      [
        "--shardsvr",
        "--replSet",
        "shard2",
        "--bind_ip_all",
        "--port",
        "27024"
      ]
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')", "--port", "27024" ]
      interval: 5s
      start_period: 10s
  
  # роутер
  mongos_router:
    image: mongo:latest
    container_name: mongos_router
    restart: always
    ports:
      - "27020:27020"
    command:
      [
        "mongos", # обычная mongo в режиме роутера
        "--configdb", 
        "config_server/configSrv:27017",  # передача данных сервера конфигурации
        "--bind_ip_all",
        "--port",
        "27020"
      ]
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')", "--port", "27020" ]
      interval: 5s
      start_period: 10s

volumes:
  config-data:
  shard1-data:
  shard2-data:
  shard1-replica1-data:
  shard1-replica2-data:
  shard2-replica1-data:
  shard2-replica2-data: